shoutBoard

####1####
//we should check that it looks good
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(4);
endCircles.push_back(33);

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::LEFT);
directions.push_back(Direction::RIGHT);

solver.init(b,1,endCircles,directions);
std::vector<int> solutionPath = solver.solve();

####2####
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(2);
endCircles.push_back247

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::LEFT);
directions.push_back(Direction::RIGHT);

solver.init(b,10,endCircles,directions);
std::vector<int> solutionPath = solver.solve();



####3####
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(356);
endCircles.push_back(15);

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::LEFT);
directions.push_back(Direction::RIGHT);

solver.init(b,442,endCircles,directions);
std::vector<int> solutionPath = solver.solve();



#####deer - 1####
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(191);
endCircles.push_back(2);

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::RIGHT);
directions.push_back(Direction::LEFT);
solver.init(b,18,endCircles,directions);

#####deer - 2####
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(303);
endCircles.push_back(2);

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::RIGHT);
directions.push_back(Direction::LEFT);
solver.init(b,118,endCircles,directions);

#####heard - 1####
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(7);
endCircles.push_back(2);

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::RIGHT);
directions.push_back(Direction::RIGHT);
solver.init(b,98,endCircles,directions);

#####heard - 2####
std::vector<int> endCircles = std::vector<int>();
endCircles.push_back(49);
endCircles.push_back(36);

std::vector<Direction> directions = std::vector<Direction>();
directions.push_back(Direction::LEFT);
directions.push_back(Direction::RIGHT);
solver.init(b,38,endCircles,directions);